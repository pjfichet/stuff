.H2 Git pull request
.H3 Clone the repository
.PP
Go on the github project page, click fork, and clone
your new repo.
.vS sh
	git clone https://github.com/me/project.git
.vE
To keep the fork up to date with the upstream rpo,
we need to add a remote.
.vS sh
	git remote add upstream https://github.com/someone/project.git
	# verify the new remote named 'upstream'
	git remote -v
.vE
Whenever you want to update your fork with the latest upstream
changes you'll need to first fetch the upstream repo's branches
and latest commits to bring them into your repository:
.vS sh
	git fetch upstream
	#View all branches, including those from upstream.
	git branch -va
.vE
Now, checkout your own master branch and merge the upstream
repo's master branch:
.vS sh
	git checkout master
	git merge upstream/master
.vE
If there are no unique commits on the local master branch, git
will simply perform a fast-forward. However, if you have been
making changes on master (in the vast majority of cases you
probably shouldn't be - see the next section, you may have to
deal with conflicts. When doing so, be careful to respect the
changes made upstream.
.PP
Now, your local master branch is up-to-date with everything
modified upstream.
.
.
.H3 Work on a new branch
.PP
Whenever you begin work on a new feature or bugfix, it's
important that you create a new branch. Not only is it proper git
workflow, but it also keeps your changes organized and separated
from the master branch so that you can easily submit and manage
multiple pull requests for every task you complete.
.vS sh
	# checkout the master branch since new branch comes from master
	git checkout master
	# create a new branch named mybranch
	git branch <branch>
	# switch to your new branch
	git checkout <branch>
.vE
Now, hack.
.
.
.H3 Clean the repository
.PP
Prior to submitting your pull request, you might want to do a few
things to clean up your branch and make it as simple as possible
for the original repo's maintainer to test, accept, and merge
your work.
.PP
If any commits have been made to the upstream master branch, you
should rebase your development branch so that merging it will be
a simple fast-forward that won't require any conflict resolution
work.
.vS sh
	#echo merge with upstream
	git fetch upstream
	git checkout master
	git merge upstream/master
.vE
If there were any new commits, rebase your development branch:
.vS sh
	git checkout <branch>
	git rebase master
.vE
Now, it may be desirable to squash some of your smaller commits
down into a small number of larger more cohesive commits. You can
do this with an interactive rebase:
.vS sh
	git checkout
	git rebase -i master
.vE
.
.
.
.H3 Pull Request
.PP
Once you've committed and pushed all of your changes to GitHub, go to the
page for your fork on GitHub, select your development branch, and click the
pull request button. If you need to make any adjustments to your pull
request, just push the updates to GitHub. Your pull request will
automatically track the changes on your development branch and update.
